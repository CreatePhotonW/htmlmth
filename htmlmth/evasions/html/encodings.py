from htmlmth.utils import TransformFunction, string_to_tfarg_function, mime_type_based_transform, normalized_headers_to_tfarg_function
import htmlmth.mods.http
import htmlmth.mods.html


# This file was generated by generate_encodings_py.py"


# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
no_declared_encoding_encoded_as_utf_8 = TransformFunction("",
                                                     "No encoding declared ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
no_declared_encoding_encoded_as_utf_16_be = TransformFunction("",
                                                     "No encoding declared ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
no_declared_encoding_encoded_as_utf_16_le = TransformFunction("",
                                                     "No encoding declared ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
no_declared_encoding_encoded_as_utf_7_0 = TransformFunction("",
                                                     "No encoding declared ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
no_declared_encoding_encoded_as_utf_7_1 = TransformFunction("",
                                                     "No encoding declared ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
no_declared_encoding_encoded_as_utf_7_2 = TransformFunction("",
                                                     "No encoding declared ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
no_declared_encoding_encoded_as_utf_7_3 = TransformFunction("",
                                                     "No encoding declared ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
no_declared_encoding_encoded_as_utf_7_4 = TransformFunction("",
                                                     "No encoding declared ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
no_declared_encoding_encoded_as_utf_7_5 = TransformFunction("",
                                                     "No encoding declared ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
no_declared_encoding_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "No encoding declared ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_8_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_16_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_16be_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_16le_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_7_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_8_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-8 in http headers ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_16_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-16 in http headers ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_16be_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-16be in http headers ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_16le_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-16le in http headers ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_7_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-7 in http headers ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_8_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-8 in http headers ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_16_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-16 in http headers ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_16be_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-16be in http headers ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_16le_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-16le in http headers ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_7_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-7 in http headers ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_8_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_16_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_16be_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_16le_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_7_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_8_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_16_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_16be_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_16le_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_7_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_8_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_16_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_16be_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_16le_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_7_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_8_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_16_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_16be_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_16le_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_7_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_8_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_16_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_16be_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_16le_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_7_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_8_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_16_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_16be_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_16le_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_7_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_8_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-8 in http headers ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_16_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-16 in http headers ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_16be_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-16be in http headers ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_16le_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-16le in http headers ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that no BOM present
http_declared_utf_7_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-7 in http headers ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_8_encoded_as_utf_8 = TransformFunction("",
                                                     "utf-8 BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_16be_encoded_as_utf_8 = TransformFunction("",
                                                     "utf-16be BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_16le_encoded_as_utf_8 = TransformFunction("",
                                                     "utf-16le BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_1_encoded_as_utf_8 = TransformFunction("",
                                                     "utf-7 (variant 1) BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_2_encoded_as_utf_8 = TransformFunction("",
                                                     "utf-7 (variant 2) BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_3_encoded_as_utf_8 = TransformFunction("",
                                                     "utf-7 (variant 3) BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_4_encoded_as_utf_8 = TransformFunction("",
                                                     "utf-7 (variant 4) BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_5_encoded_as_utf_8 = TransformFunction("",
                                                     "utf-7 (variant 5) BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_8_encoded_as_utf_16_be = TransformFunction("",
                                                     "utf-8 BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_16be_encoded_as_utf_16_be = TransformFunction("",
                                                     "utf-16be BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_16le_encoded_as_utf_16_be = TransformFunction("",
                                                     "utf-16le BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_1_encoded_as_utf_16_be = TransformFunction("",
                                                     "utf-7 (variant 1) BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_2_encoded_as_utf_16_be = TransformFunction("",
                                                     "utf-7 (variant 2) BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_3_encoded_as_utf_16_be = TransformFunction("",
                                                     "utf-7 (variant 3) BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_4_encoded_as_utf_16_be = TransformFunction("",
                                                     "utf-7 (variant 4) BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_5_encoded_as_utf_16_be = TransformFunction("",
                                                     "utf-7 (variant 5) BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_8_encoded_as_utf_16_le = TransformFunction("",
                                                     "utf-8 BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_16be_encoded_as_utf_16_le = TransformFunction("",
                                                     "utf-16be BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_16le_encoded_as_utf_16_le = TransformFunction("",
                                                     "utf-16le BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_1_encoded_as_utf_16_le = TransformFunction("",
                                                     "utf-7 (variant 1) BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_2_encoded_as_utf_16_le = TransformFunction("",
                                                     "utf-7 (variant 2) BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_3_encoded_as_utf_16_le = TransformFunction("",
                                                     "utf-7 (variant 3) BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_4_encoded_as_utf_16_le = TransformFunction("",
                                                     "utf-7 (variant 4) BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_5_encoded_as_utf_16_le = TransformFunction("",
                                                     "utf-7 (variant 5) BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_8_encoded_as_utf_7_0 = TransformFunction("",
                                                     "utf-8 BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_16be_encoded_as_utf_7_0 = TransformFunction("",
                                                     "utf-16be BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_16le_encoded_as_utf_7_0 = TransformFunction("",
                                                     "utf-16le BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_1_encoded_as_utf_7_0 = TransformFunction("",
                                                     "utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_2_encoded_as_utf_7_0 = TransformFunction("",
                                                     "utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_3_encoded_as_utf_7_0 = TransformFunction("",
                                                     "utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_4_encoded_as_utf_7_0 = TransformFunction("",
                                                     "utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_5_encoded_as_utf_7_0 = TransformFunction("",
                                                     "utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_8_encoded_as_utf_7_1 = TransformFunction("",
                                                     "utf-8 BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_16be_encoded_as_utf_7_1 = TransformFunction("",
                                                     "utf-16be BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_16le_encoded_as_utf_7_1 = TransformFunction("",
                                                     "utf-16le BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_1_encoded_as_utf_7_1 = TransformFunction("",
                                                     "utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_2_encoded_as_utf_7_1 = TransformFunction("",
                                                     "utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_3_encoded_as_utf_7_1 = TransformFunction("",
                                                     "utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_4_encoded_as_utf_7_1 = TransformFunction("",
                                                     "utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_5_encoded_as_utf_7_1 = TransformFunction("",
                                                     "utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_8_encoded_as_utf_7_2 = TransformFunction("",
                                                     "utf-8 BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_16be_encoded_as_utf_7_2 = TransformFunction("",
                                                     "utf-16be BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_16le_encoded_as_utf_7_2 = TransformFunction("",
                                                     "utf-16le BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_1_encoded_as_utf_7_2 = TransformFunction("",
                                                     "utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_2_encoded_as_utf_7_2 = TransformFunction("",
                                                     "utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_3_encoded_as_utf_7_2 = TransformFunction("",
                                                     "utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_4_encoded_as_utf_7_2 = TransformFunction("",
                                                     "utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_5_encoded_as_utf_7_2 = TransformFunction("",
                                                     "utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_8_encoded_as_utf_7_3 = TransformFunction("",
                                                     "utf-8 BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_16be_encoded_as_utf_7_3 = TransformFunction("",
                                                     "utf-16be BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_16le_encoded_as_utf_7_3 = TransformFunction("",
                                                     "utf-16le BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_1_encoded_as_utf_7_3 = TransformFunction("",
                                                     "utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_2_encoded_as_utf_7_3 = TransformFunction("",
                                                     "utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_3_encoded_as_utf_7_3 = TransformFunction("",
                                                     "utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_4_encoded_as_utf_7_3 = TransformFunction("",
                                                     "utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_5_encoded_as_utf_7_3 = TransformFunction("",
                                                     "utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_8_encoded_as_utf_7_4 = TransformFunction("",
                                                     "utf-8 BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_16be_encoded_as_utf_7_4 = TransformFunction("",
                                                     "utf-16be BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_16le_encoded_as_utf_7_4 = TransformFunction("",
                                                     "utf-16le BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_1_encoded_as_utf_7_4 = TransformFunction("",
                                                     "utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_2_encoded_as_utf_7_4 = TransformFunction("",
                                                     "utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_3_encoded_as_utf_7_4 = TransformFunction("",
                                                     "utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_4_encoded_as_utf_7_4 = TransformFunction("",
                                                     "utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_5_encoded_as_utf_7_4 = TransformFunction("",
                                                     "utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_8_encoded_as_utf_7_5 = TransformFunction("",
                                                     "utf-8 BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_16be_encoded_as_utf_7_5 = TransformFunction("",
                                                     "utf-16be BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_16le_encoded_as_utf_7_5 = TransformFunction("",
                                                     "utf-16le BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_1_encoded_as_utf_7_5 = TransformFunction("",
                                                     "utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_2_encoded_as_utf_7_5 = TransformFunction("",
                                                     "utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_3_encoded_as_utf_7_5 = TransformFunction("",
                                                     "utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_4_encoded_as_utf_7_5 = TransformFunction("",
                                                     "utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_5_encoded_as_utf_7_5 = TransformFunction("",
                                                     "utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_8_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "utf-8 BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_16be_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "utf-16be BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_16le_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "utf-16le BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_1_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_2_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_3_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_4_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
bom_declared_utf_7_variant_5_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }))

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_8_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-8 BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_16be_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-16be BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_16le_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-16le BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_1_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_2_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_3_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_4_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_5_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_8_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-8 BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_16be_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-16be BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_16le_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-16le BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_1_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_2_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_3_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_4_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_5_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_8_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-8 BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_16be_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-16be BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_16le_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-16le BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_1_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_2_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_3_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_4_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_5_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_8_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-8 BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_16be_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-16be BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_16le_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-16le BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_1_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_2_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_3_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_4_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_5_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_8_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-8 BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_16be_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-16be BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_16le_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-16le BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_1_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_2_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_3_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_4_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_5_encoded_as_utf_8 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-8",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_8(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_8_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-8 BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_16be_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-16be BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_16le_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-16le BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_1_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_2_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_3_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_4_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_5_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_8_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-8 BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_16be_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-16be BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_16le_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-16le BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_1_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_2_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_3_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_4_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_5_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_8_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-8 BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_16be_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-16be BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_16le_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-16le BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_1_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_2_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_3_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_4_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_5_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_8_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-8 BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_16be_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-16be BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_16le_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-16le BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_1_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_2_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_3_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_4_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_5_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_8_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-8 BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_16be_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-16be BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_16le_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-16le BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_1_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_2_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_3_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_4_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_5_encoded_as_utf_16_be = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-16BE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_be(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_8_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-8 BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_16be_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-16be BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_16le_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-16le BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_1_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_2_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_3_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_4_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_5_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_8_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-8 BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_16be_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-16be BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_16le_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-16le BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_1_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_2_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_3_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_4_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_5_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_8_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-8 BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_16be_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-16be BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_16le_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-16le BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_1_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_2_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_3_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_4_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_5_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_8_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-8 BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_16be_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-16be BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_16le_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-16le BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_1_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_2_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_3_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_4_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_5_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_8_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-8 BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_16be_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-16be BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_16le_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-16le BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_1_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_2_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_3_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_4_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_5_encoded_as_utf_16_le = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-16LE",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_16_le(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_8_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_16be_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_16le_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_1_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_2_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_3_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_4_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_5_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_8_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_16be_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_16le_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_1_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_2_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_3_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_4_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_5_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_8_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_16be_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_16le_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_1_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_2_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_3_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_4_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_5_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_8_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_16be_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_16le_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_1_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_2_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_3_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_4_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_5_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_8_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_16be_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_16le_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_1_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_2_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_3_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_4_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_5_encoded_as_utf_7_0 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 0",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_0(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_8_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_16be_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_16le_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_1_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_2_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_3_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_4_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_5_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_8_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_16be_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_16le_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_1_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_2_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_3_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_4_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_5_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_8_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_16be_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_16le_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_1_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_2_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_3_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_4_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_5_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_8_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_16be_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_16le_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_1_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_2_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_3_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_4_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_5_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_8_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_16be_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_16le_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_1_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_2_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_3_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_4_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_5_encoded_as_utf_7_1 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 1",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_1(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_8_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_16be_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_16le_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_1_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_2_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_3_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_4_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_5_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_8_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_16be_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_16le_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_1_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_2_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_3_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_4_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_5_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_8_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_16be_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_16le_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_1_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_2_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_3_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_4_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_5_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_8_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_16be_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_16le_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_1_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_2_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_3_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_4_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_5_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_8_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_16be_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_16le_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_1_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_2_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_3_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_4_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_5_encoded_as_utf_7_2 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 2",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_2(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_8_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_16be_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_16le_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_1_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_2_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_3_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_4_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_5_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_8_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_16be_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_16le_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_1_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_2_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_3_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_4_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_5_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_8_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_16be_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_16le_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_1_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_2_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_3_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_4_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_5_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_8_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_16be_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_16le_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_1_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_2_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_3_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_4_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_5_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_8_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_16be_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_16le_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_1_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_2_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_3_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_4_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_5_encoded_as_utf_7_3 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 3",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_3(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_8_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_16be_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_16le_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_1_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_2_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_3_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_4_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_5_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_8_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_16be_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_16le_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_1_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_2_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_3_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_4_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_5_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_8_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_16be_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_16le_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_1_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_2_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_3_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_4_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_5_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_8_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_16be_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_16le_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_1_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_2_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_3_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_4_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_5_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_8_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_16be_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_16le_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_1_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_2_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_3_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_4_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_5_encoded_as_utf_7_4 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 4",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_4(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_8_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_16be_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_16le_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_1_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_2_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_3_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_4_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_5_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_8_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_16be_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_16le_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_1_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_2_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_3_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_4_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_5_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_8_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_16be_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_16le_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_1_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_2_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_3_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_4_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_5_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_8_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_16be_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_16le_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_1_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_2_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_3_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_4_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_5_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_8_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_16be_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_16le_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_1_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_2_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_3_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_4_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_5_encoded_as_utf_7_5 = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 5",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_8_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_16be_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_16le_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_1_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_2_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_3_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_4_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_8_bom_declared_utf_7_variant_5_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-8 in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-8', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_8_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_16be_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_16le_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_1_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_2_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_3_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_4_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16_bom_declared_utf_7_variant_5_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-16 in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_8_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_16be_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_16le_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_1_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_2_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_3_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_4_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16be_bom_declared_utf_7_variant_5_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-16be in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16be', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_8_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_16be_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_16le_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_1_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_2_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_3_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_4_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_16le_bom_declared_utf_7_variant_5_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-16le in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-16le', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_8_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-8 BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xef\xbb\xbf' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_16be_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-16be BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xfe\xff' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_16le_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-16le BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '\xff\xfe' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_1_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 1) BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_2_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 2) BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v9' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_3_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 3) BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v+' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_4_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 4) BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v/' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

# soft assumption that no encoding declared in the document
# soft assumption that encoding has not been declared in HTTP headers
# soft assumption that no BOM present
http_declared_utf_7_bom_declared_utf_7_variant_5_encoded_as_utf_7_5_i = TransformFunction("",
                                                     "declared as utf-7 in http headers ;utf-7 (variant 5) BOM ;sent encoded as UTF-7 variant 5i",
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'application/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/xml': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/javascript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: htmlmth.mods.html.utf_7_5_i(x.encode('utf-8'))),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xhtml+xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'application/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/xml': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/javascript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                         'text/vbscript': string_to_tfarg_function(lambda x: '+/v8-' + str(x)),
                                                     }),
                                                     mime_type_based_transform({
                                                         'text/html': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xhtml+xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'application/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/xml': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/javascript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                         'text/vbscript': normalized_headers_to_tfarg_function(lambda x: htmlmth.mods.http.declare_encoding('utf-7', x)),
                                                     })
)

